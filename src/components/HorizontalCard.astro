---
const { title, cover, desc, url, audioUrl, id, pubDate, duration } =
  Astro.props;

import astropodConfig from "../../.astropod/astropod.config.json";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
dayjs.extend(localizedFormat);
import PlayIcon from "./icons/playIcon.astro";
import PauseIcon from "./icons/pauseIcon.astro";
import DownloadIcon from "./icons/downloadIcon.astro";

let cover_url = cover ? cover : astropodConfig.cover;
const displayDate = dayjs(pubDate).format("ll");

function formatTime(secs) {
  if (isNaN(secs) || secs < 0) {
    const segmentedTime = secs.split(":");
    return segmentedTime[0] == "00" || segmentedTime[0] == "0" ? secs : null;
  }

  const hours = Math.floor(secs / 3600);
  const minutes = Math.floor((secs % 3600) / 60);
  const seconds = Math.floor(secs % 60);
  const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
  const formattedseconds = seconds < 10 ? `0${seconds}` : seconds;

  return hours > 0
    ? `${hours}:${formattedMinutes}:${formattedseconds}`
    : `${minutes}:${formattedseconds}`;
}

const displayDuration = formatTime(duration);
---

<div class="episode-card">
  <div class="hero-content flex-row">
    <a href={url} class="min-w-fit">
      <img
        src={cover_url}
        alt={title}
        class="shadow-lg rounded-md w-[4.5rem] h-[4.5rem] md:w-24 md:h-24"
      />
    </a>
    <div class="grow w-full overflow-auto">
      <a href={url}>
        <h2 class="md:text-xl text-sm font-semibold truncate">
          {title}
        </h2>
        <p class="text-xs font-medium opacity-60">
          {displayDuration && displayDuration + " â€¢ "}
          {displayDate}
        </p>
        <div class="my-1 text-xs md:text-sm line-clamp-2" set:html={desc} />
      </a>
    </div>
    <a
      href="#"
      data-audio-url={audioUrl}
      class="download-btn-song"
      download
      target="_blank"
    >
      <DownloadIcon />
    </a>
    <label class="btn btn-circle md:mx-2 swap">
      <input
        type="checkbox"
        class="card-pay-buttons"
        id={id}
        data-audio-url={audioUrl}
        data-audio-title={title}
        aria-label="Play and pause"
      />
      <div class="play-btn swap-off">
        <PlayIcon />
      </div>
      <div class="pause-btn swap-on">
        <PauseIcon />
      </div>
    </label>
  </div>
  <hr class="my-3 border-base-content opacity-[.15]" />
</div>

<style>
  .swap-on {
    border-radius: 100%;
    border: 2px solid #fff;
    padding: 10px;
  }
  .swap-off {
    padding: 10px;
  }
</style>

<style>
  .episode-card:last-child hr {
    display: none;
  }
</style>

<script>
  const downloadButtons = document.querySelectorAll(".download-btn-song");
  downloadButtons.forEach((button) => {
    button.addEventListener("click", async (e) => {
      e.preventDefault();
      const audioUrl = button.dataset.audioUrl;

      try {
        // Fetch the audio file
        const response = await fetch(audioUrl);
        if (!response.ok)
          throw new Error(`Failed to fetch the audio: ${response.statusText}`);
        const data = await response.blob(); // Get the data as a Blob object

        // Create a URL for the Blob
        const url = window.URL.createObjectURL(data);

        // Create a link to trigger the download
        const link = document.createElement("a");
        link.href = url;
        const parts = audioUrl.split("/");
        link.download = parts[parts.length - 1];
        document.body.appendChild(link);
        link.click();

        // Clean up the URL object and remove the link element
        window.URL.revokeObjectURL(url);
        link.remove();
      } catch (error) {
        console.error("Error downloading the file:", error);
      }
    });
  });
</script>
